// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MakeSelector /> when component initalizes should initalize to loading 1`] = `
<Router
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 1,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "pathname": "/",
        "search": "",
        "state": undefined,
      },
      "push": [Function],
      "replace": [Function],
    }
  }
>
  <MakeSelector />
</Router>
`;

exports[`<MakeSelector /> when component loads should render makes with images 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MakeSelector>
      <div
        className="container"
      >
        <h1
          style={
            Object {
              "textAlign": "center",
            }
          }
        >
          Select Make
        </h1>
        <div
          className="d-flex flex-wrap justify-content-center"
        >
          <div
            className="d-flex col-3 mt-1 mb-1 justify-content-center"
            key="Hyundai"
          >
            <Link
              to="/Hyundai"
            >
              <LinkAnchor
                href="/Hyundai"
                navigate={[Function]}
              >
                <a
                  href="/Hyundai"
                  onClick={[Function]}
                >
                  <img
                    src="/MakerImages/Hyundai.png"
                    style={
                      Object {
                        "height": "100%",
                        "width": "100%",
                      }
                    }
                  />
                </a>
              </LinkAnchor>
            </Link>
          </div>
          <div
            className="d-flex col-3 mt-1 mb-1 justify-content-center"
            key="Ford"
          >
            <Link
              to="/Ford"
            >
              <LinkAnchor
                href="/Ford"
                navigate={[Function]}
              >
                <a
                  href="/Ford"
                  onClick={[Function]}
                >
                  <img
                    src="/MakerImages/Ford.png"
                    style={
                      Object {
                        "height": "100%",
                        "width": "100%",
                      }
                    }
                  />
                </a>
              </LinkAnchor>
            </Link>
          </div>
        </div>
      </div>
    </MakeSelector>
  </Router>
</BrowserRouter>
`;

exports[`<MakeSelector /> when the api call fails should render a ErrorDisplay 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MakeSelector>
      <ErrorDisplay
        title="Select Make"
      >
        <div>
          <h1
            style={
              Object {
                "textAlign": "center",
              }
            }
          >
            Select Make
          </h1>
          <Alert
            closeLabel="Close alert"
            key="error"
            show={true}
            style={
              Object {
                "textAlign": "center",
              }
            }
            transition={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": Object {
                  "appear": false,
                  "in": false,
                  "mountOnEnter": false,
                  "timeout": 300,
                  "unmountOnExit": false,
                },
                "render": [Function],
              }
            }
            variant="warning"
          >
            <Fade
              appear={false}
              in={true}
              mountOnEnter={false}
              style={
                Object {
                  "textAlign": "center",
                }
              }
              timeout={300}
              unmountOnExit={true}
            >
              <Transition
                addEndListener={[Function]}
                appear={false}
                enter={true}
                exit={true}
                in={true}
                mountOnEnter={false}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                style={
                  Object {
                    "textAlign": "center",
                  }
                }
                timeout={300}
                unmountOnExit={true}
              >
                <div
                  className="fade alert alert-warning show"
                  role="alert"
                  style={
                    Object {
                      "textAlign": "center",
                    }
                  }
                >
                  An error has occurred while loading, please refresh and try again.
                </div>
              </Transition>
            </Fade>
          </Alert>
        </div>
      </ErrorDisplay>
    </MakeSelector>
  </Router>
</BrowserRouter>
`;
